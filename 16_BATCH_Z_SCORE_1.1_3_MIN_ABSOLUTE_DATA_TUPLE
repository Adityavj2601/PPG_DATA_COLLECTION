import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statistics as stc 
import pylab
import plotly.graph_objects as go
import matplotlib.pyplot as plt

df = pd.read_csv('a.txt',sep = "=",names = ('IR','R','G','BPM','AVG_BPM'))
IR = df['IR']

array_16_val = []
array_16_loc = []
val = []
loc = []
peaks = []
vally = []
i=1
array_16_val_vally = []
array_16_loc_vally = []

for i in range(1,len(IR)):

  loc.append(i)
  val.append(IR[i])
  array_16_val.append(IR[i])
  #print(array_16_val)
  array_16_loc.append(i)
  #print(i)
  if(i % 16 == 0):
    #print(array_16_val)
    mean = stc.mean(array_16_val)
    standrad_deviation = stc.stdev(array_16_val)
    
    for k in array_16_val:

      z_score_var = ((k - mean) / standrad_deviation)
      if z_score_var > 1.1: #1.2 is best till now
        value = int(array_16_val.index(k))
        peaks.append((array_16_loc[value],k)) 
        #print(peaks)
        
    array_16_loc=[]
    array_16_val=[]



for i in range(1,len(IR)):

  loc.append(i)
  val.append(IR[i])
  array_16_val_vally.append(IR[i])
  #print(array_16_val)
  array_16_loc_vally.append(i)
  #print(i)
  if(i % 16== 0):
    #print(array_16_val)
    mean = stc.mean(array_16_val_vally)
    standrad_deviation = stc.stdev(array_16_val_vally)
    
    for k in array_16_val_vally:

      z_score_var = ((k - mean) / standrad_deviation)
      if z_score_var < -1.1: #1.05 is best till now
        value = int(array_16_val_vally.index(k))
        vally.append((array_16_loc_vally[value],k)) 
        #print(peaks)
        
    array_16_loc_vally=[]
    array_16_val_vally=[]

'''------------------------------------------------------------------------------------------ for Printing ABSOLUTE DATA of Peaks and Valley -------------------------------------------------------------------------------------------------------'''
temp_vally = 0
temp_peak = 0
loc_vally =[lis[0] for lis in vally]
loc_peaks = [lis[0] for lis in peaks]
for i in range(1,len(IR)):
  if i in loc_peaks:
    if temp_vally not in absolute_data:
      absolute_data.append(temp_vally)
    temp_peak = i
  if i in loc_vally:
    if temp_peak not in absolute_data:
      absolute_data.append(temp_peak)
    temp_vally = i
  
print('ABSOLUTE_DATA',absolute_data)
print("  ")
absolute_data_tuple =[]
combine = peaks + vally
combine_loc = [lis[0] for lis in combine]
for i in absolute_data:
  #print(i)
  if i in combine_loc:
    indx  = [y[0] for y in combine].index(i)
    absolute_data_tuple.append(combine[indx])


print('absolute_data_tuple',absolute_data_tuple)
'''-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'''


#print(x_data)
print('peaks',peaks)
print("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
print('valley',vally)
fig = go.Figure()
fig.add_trace(go.Scatter(
    y=IR,
    mode='lines+markers',
    name='Original Plot'
))

fig.add_trace(go.Scatter(
    x=[lis[0] for lis in peaks],
    #y=[time_series[l] for l in detected_peaks],
    y = [lis[1] for lis in peaks],
    mode='markers',
    marker=dict(
        size=8,
        color='red',
        symbol='cross'
    ),
    name='Detected Peaks'
))

fig.add_trace(go.Scatter(
    x=[lis[0] for lis in vally],
    #y=[time_series[l] for l in detected_peaks],
    y = [lis[1] for lis in vally],
    mode='markers',
    marker=dict(
        size=8,
        color='green',
        symbol='star'
    ),
    name='Detected Peaks'
))
fig.update_layout(
    title="16_BATCH_ZSCORE_1.1_3_MIN",
    xaxis_title="TIME",
    yaxis_title="IR",
    font=dict(
        family="Courier New, monospace",
        size=18,
        color="#7f7f7f"
    )
)

fig.show()

